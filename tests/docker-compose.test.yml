version: '3.8'

services:
  postgres-test:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: concertmaster_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./sql/init-test-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d concertmaster_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio-test:
    image: minio/minio:latest
    ports:
      - "9001:9000"
      - "9002:9001"
    environment:
      MINIO_ROOT_USER: test_admin
      MINIO_ROOT_PASSWORD: test_password
    command: server /data --console-address ":9001"
    volumes:
      - minio_test_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  api-test:
    build:
      context: ../
      dockerfile: backend/Dockerfile.test
    environment:
      DATABASE_URL: postgresql://test_user:test_password@postgres-test:5432/concertmaster_test
      REDIS_URL: redis://redis-test:6379
      S3_ENDPOINT: http://minio-test:9000
      S3_ACCESS_KEY: test_admin
      S3_SECRET_KEY: test_password
      TESTING: true
      LOG_LEVEL: DEBUG
    ports:
      - "8001:8000"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      minio-test:
        condition: service_healthy
    volumes:
      - ../backend:/app/backend
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "
        alembic upgrade head &&
        python -m pytest tests/ --verbose --tb=short
      "

  ui-test:
    build:
      context: ../
      dockerfile: frontend/Dockerfile.test
    environment:
      REACT_APP_API_URL: http://api-test:8000
      REACT_APP_ENVIRONMENT: test
      CI: true
    ports:
      - "3001:3000"
    depends_on:
      api-test:
        condition: service_healthy
    volumes:
      - ../frontend:/app/frontend
      - ./logs:/app/logs
    command: >
      sh -c "
        npm ci &&
        npm run test:unit -- --watchAll=false --coverage &&
        npm run build
      "

  playwright-test:
    build:
      context: ../
      dockerfile: tests/Dockerfile.playwright
    environment:
      PLAYWRIGHT_BASE_URL: http://ui-test:3000
      API_BASE_URL: http://api-test:8000
    depends_on:
      ui-test:
        condition: service_started
      api-test:
        condition: service_healthy
    volumes:
      - ./e2e:/app/e2e
      - ./e2e-results:/app/test-results
    command: >
      sh -c "
        npx playwright install &&
        npx playwright test --reporter=html --output-dir=/app/test-results
      "

  security-test:
    build:
      context: ../
      dockerfile: tests/Dockerfile.security
    environment:
      TARGET_URL: http://api-test:8000
    depends_on:
      api-test:
        condition: service_healthy
    volumes:
      - ./security:/app/security
      - ./security-results:/app/results
    command: >
      sh -c "
        bandit -r /app/backend -f json -o /app/results/bandit-report.json &&
        zap-baseline.py -t http://api-test:8000 -J /app/results/zap-report.json
      "

  performance-test:
    build:
      context: ../
      dockerfile: tests/Dockerfile.performance
    environment:
      TARGET_URL: http://api-test:8000
    depends_on:
      api-test:
        condition: service_healthy
    volumes:
      - ./performance:/app/performance
      - ./performance-results:/app/results
    command: >
      sh -c "
        artillery run /app/performance/load-test.yml --output /app/results/artillery-report.json &&
        k6 run /app/performance/stress-test.js
      "

volumes:
  postgres_test_data:
  redis_test_data:
  minio_test_data:

networks:
  default:
    name: concertmaster-test-network